!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACE	Problem054.c	/^    ACE,$/;"	e	enum:__anon1	file:
BOUNDED_ARRAY_DEF	BoundedArray.h	3;"	d
BOUNDED_ARRAY_IMPL	BoundedArray.c	/^BOUNDED_ARRAY_IMPL(BoundedArrayInt32, gint32)$/;"	f
BOUNDED_ARRAY_IMPL	BoundedArray.c	5;"	d	file:
CLUBS	Problem054.c	/^    CLUBS,$/;"	e	enum:__anon2	file:
Card	Problem054.c	/^} Card;$/;"	t	typeref:struct:__anon3	file:
Currency	Problem031.c	/^typedef struct Currency {$/;"	s	file:
Currency	Problem031.c	/^} Currency;$/;"	t	typeref:struct:Currency	file:
DIAMONDS	Problem054.c	/^    DIAMONDS,$/;"	e	enum:__anon2	file:
EIGHT	Problem054.c	/^    EIGHT,$/;"	e	enum:__anon1	file:
FIVE	Problem054.c	/^    FIVE,$/;"	e	enum:__anon1	file:
FLUSH	Problem054.c	/^    FLUSH,$/;"	e	enum:__anon4	file:
FOUR	Problem054.c	/^    FOUR,$/;"	e	enum:__anon1	file:
FOUROFAKIND	Problem054.c	/^    FOUROFAKIND,$/;"	e	enum:__anon4	file:
FULLHOUSE	Problem054.c	/^    FULLHOUSE,$/;"	e	enum:__anon4	file:
Fraction	Problem071.c	/^} Fraction;$/;"	t	typeref:struct:__anon6	file:
GCC	Makefile	/^GCC = gcc $(GCCOPTS)$/;"	m
GCCOPTS	Makefile	/^GCCOPTS = -Werror -Wall -pedantic -std=c99 -O2 -march=pentium4 -ggdb -pg $(GLIBINCLUDES) $/;"	m
GLIBINCLUDES	Makefile	/^GLIBINCLUDES = -I\/usr\/include\/glib-2.0 -I\/usr\/lib\/glib-2.0\/include$/;"	m
GLIBPATH	Makefile	/^GLIBPATH = -lglib-2.0 -lintl -liconv -lgmp -lmpfr$/;"	m
HEARTS	Problem054.c	/^    HEARTS,$/;"	e	enum:__anon2	file:
HIGHCARD	Problem054.c	/^    HIGHCARD,$/;"	e	enum:__anon4	file:
Hand	Problem054.c	/^} Hand;$/;"	t	typeref:struct:__anon5	file:
JACK	Problem054.c	/^    JACK,$/;"	e	enum:__anon1	file:
KING	Problem054.c	/^    KING,$/;"	e	enum:__anon1	file:
LIMIT	Problem092.c	8;"	d	file:
MAX_CUBE	Problem062.c	7;"	d	file:
MAX_PENTAGONAL	Utility.h	6;"	d
MAX_PERMUTATIONS	Utility.c	344;"	d	file:
MAX_PRIMES	Utility.h	7;"	d
NINE	Problem054.c	/^    NINE,$/;"	e	enum:__anon1	file:
OBJECTS	Makefile	/^OBJECTS = $(PROBLEMOBJ) Solver.o Utility.o BoundedArray.o$/;"	m
ONEPAIR	Problem054.c	/^    ONEPAIR,$/;"	e	enum:__anon4	file:
PROBLEM	Makefile	/^PROBLEM = Problem062$/;"	m
PROBLEMDEP	Makefile	/^PROBLEMDEP = Answer.h$/;"	m
PROBLEMOBJ	Makefile	/^PROBLEMOBJ = $(PROBLEM).o$/;"	m
PROBLEMSRC	Makefile	/^PROBLEMSRC = $(PROBLEM).c$/;"	m
Path	Problem081.c	/^} Path;$/;"	t	typeref:struct:__anon7	file:
QUEEN	Problem054.c	/^    QUEEN,$/;"	e	enum:__anon1	file:
ROYALFLUSH	Problem054.c	/^    ROYALFLUSH,$/;"	e	enum:__anon4	file:
Rank	Problem054.c	/^} Rank;$/;"	t	typeref:enum:__anon4	file:
SEVEN	Problem054.c	/^    SEVEN,$/;"	e	enum:__anon1	file:
SIX	Problem054.c	/^    SIX,$/;"	e	enum:__anon1	file:
SPADES	Problem054.c	/^    SPADES,$/;"	e	enum:__anon2	file:
STRAIGHT	Problem054.c	/^    STRAIGHT,$/;"	e	enum:__anon4	file:
STRAIGHTFLUSH	Problem054.c	/^    STRAIGHTFLUSH,$/;"	e	enum:__anon4	file:
SUITCOUNT	Problem054.c	/^    SUITCOUNT$/;"	e	enum:__anon2	file:
Suit	Problem054.c	/^} Suit;$/;"	t	typeref:enum:__anon2	file:
TEN	Problem054.c	/^    TEN,$/;"	e	enum:__anon1	file:
THREE	Problem054.c	/^    THREE,$/;"	e	enum:__anon1	file:
THREEOFAKIND	Problem054.c	/^    THREEOFAKIND,$/;"	e	enum:__anon4	file:
TWO	Problem054.c	/^    TWO,$/;"	e	enum:__anon1	file:
TWOPAIR	Problem054.c	/^    TWOPAIR,$/;"	e	enum:__anon4	file:
VALUECOUNT	Problem054.c	/^    VALUECOUNT$/;"	e	enum:__anon1	file:
Value	Problem054.c	/^} Value;$/;"	t	typeref:enum:__anon1	file:
advance	Problem081.c	/^GList * advance(GList *paths, int matrix[matrixSize][matrixSize])$/;"	f
amounts	Problem031.c	/^    int amounts[8];$/;"	m	struct:Currency	file:
answer	Problem031.c	/^int answer()$/;"	f
answer	Problem032.c	/^int answer()$/;"	f
answer	Problem037.c	/^int answer()$/;"	f
answer	Problem038.c	/^int answer()$/;"	f
answer	Problem043.c	/^gint64 answer()$/;"	f
answer	Problem044.c	/^gint64 answer()$/;"	f
answer	Problem046.c	/^int answer()$/;"	f
answer	Problem049.c	/^gint64 answer()$/;"	f
answer	Problem050.c	/^int answer()$/;"	f
answer	Problem054.c	/^gint64 answer()$/;"	f
answer	Problem057.c	/^gint64 answer()$/;"	f
answer	Problem058.c	/^gint64 answer()$/;"	f
answer	Problem059.c	/^gint64 answer()$/;"	f
answer	Problem062.c	/^gint64 answer()$/;"	f
answer	Problem063.c	/^gint64 answer()$/;"	f
answer	Problem069.c	/^gint64 answer()$/;"	f
answer	Problem071.c	/^gint64 answer()$/;"	f
answer	Problem076.c	/^gint64 answer()$/;"	f
answer	Problem081.c	/^gint64 answer()$/;"	f
answer	Problem092.c	/^gint64 answer()$/;"	f
answer	Problem099.c	/^gint64 answer()$/;"	f
binary_search	Utility.c	/^int binary_search(gint64 x, BoundedArrayInt64 sortedArray)$/;"	f
cards	Problem054.c	/^    Card cards[5];$/;"	m	struct:__anon5	file:
checkCondition	Problem043.c	/^bool checkCondition(GList *ds, int idx, int mod)$/;"	f
compare	Problem054.c	/^int compare(Card a, Card b)$/;"	f
compareFractions	Problem071.c	/^int compareFractions(Fraction *a, Fraction *b)$/;"	f
countCurrency	Problem031.c	/^int countCurrency(Currency curr, int idx)$/;"	f
cull	Problem081.c	/^GList * cull(GList *paths)$/;"	f
dblRepresentation	Problem071.c	/^    double dblRepresentation;$/;"	m	struct:__anon6	file:
denominator	Problem071.c	/^    int denominator;$/;"	m	struct:__anon6	file:
digits	Utility.c	/^BoundedArrayInt32 digits(gint64 x)$/;"	f
factors	Utility.c	/^GList *factors(int x)$/;"	f
finished	Problem081.c	/^bool finished(GList *paths)$/;"	f
flush	Problem054.c	/^bool flush(Hand *h)$/;"	f
fraction	Problem071.c	/^Fraction *fraction(int n, int d)$/;"	f
fullHouse	Problem054.c	/^bool fullHouse(Hand *h)$/;"	f
g_list_remove_duplicates	Utility.c	/^GList *g_list_remove_duplicates(GList *l)$/;"	f
gcd	Utility.c	/^gint64 gcd(gint64 a, gint64 b)$/;"	f
getSuit	Problem054.c	/^Suit getSuit(char c)$/;"	f
getValue	Problem054.c	/^Value getValue(char c)$/;"	f
highcard	Problem054.c	/^    Card highcard;$/;"	m	struct:__anon5	file:
intCompare	Utility.c	/^gint intCompare(gconstpointer a, gconstpointer b)$/;"	f
integer_permutations	Utility.c	/^BoundedArrayInt64 integer_permutations(gint64 x)$/;"	f
ipow	Utility.c	/^gint64 ipow(gint64 x, gint64 y)$/;"	f
isPermutation	Utility.c	/^bool isPermutation(gint64 x, gint64 y)$/;"	f
isqrt	Utility.c	/^int isqrt(int x)$/;"	f
listOfPentagonals	Utility.c	/^GList * listOfPentagonals()$/;"	f
listOfPrimes	Utility.c	/^GList *listOfPrimes()$/;"	f
main	Solver.c	/^int main(int argc, char** argv)$/;"	f
makePandigital	Problem043.c	/^gint64 makePandigital(GList *ds)$/;"	f
matrixSize	Problem081.c	/^const int matrixSize = 80;$/;"	v
max	Utility.c	/^int max(int x, int y)$/;"	f
numberInList	Utility.c	/^bool numberInList(int x, GList *list)$/;"	f
numerator	Problem071.c	/^    int numerator;$/;"	m	struct:__anon6	file:
ofAKind	Problem054.c	/^bool ofAKind(Hand *h, int n)$/;"	f
pandigital9	Utility.c	/^bool pandigital9(int x)$/;"	f
pathLimit	Problem081.c	/^const int pathLimit = 100;$/;"	v
pathSort	Problem081.c	/^int pathSort(gconstpointer a, gconstpointer b)$/;"	f
pentagonal	Utility.c	/^int pentagonal(int x)$/;"	f
prime	Utility.c	/^bool prime(int x)$/;"	f
primes	Utility.c	/^GArray *primes = NULL;$/;"	v
primesSet	Utility.c	/^GArray *primesSet = NULL;$/;"	v
printCurrency	Problem031.c	/^void printCurrency(Currency curr)$/;"	f
printDigits	Problem043.c	/^void printDigits(GList *ds)$/;"	f
printHand	Problem054.c	/^void printHand(Hand h, bool printRank)$/;"	f
printPaths	Problem081.c	/^void printPaths(GList *paths)$/;"	f
rank	Problem054.c	/^    Rank rank;$/;"	m	struct:__anon5	file:
runningTotal	Problem081.c	/^    gint64 runningTotal;$/;"	m	struct:__anon7	file:
setRank	Problem054.c	/^void setRank(Hand *h)$/;"	f
sort	Problem054.c	/^void sort(Hand *h)$/;"	f
squareChain	Problem092.c	/^int squareChain(int x)$/;"	f
squareChainCache	Problem092.c	/^int *squareChainCache = NULL;$/;"	v
straight	Problem054.c	/^bool straight(Hand *h)$/;"	f
suit	Problem054.c	/^    Suit suit;$/;"	m	struct:__anon3	file:
suitToChar	Problem054.c	/^char suitToChar(Suit s)$/;"	f
sums	Problem076.c	/^gint64 sums(int x)$/;"	f
totient	Utility.c	/^gint64 totient(gint64 x)$/;"	f
truncatable	Problem037.c	/^bool truncatable(int x, bool skipFirst, bool left)$/;"	f
truncateLeft	Problem037.c	/^int truncateLeft(int x)$/;"	f
truncateRight	Problem037.c	/^int truncateRight(int x)$/;"	f
twoPair	Problem054.c	/^bool twoPair(Hand *h)$/;"	f
undigits	Utility.c	/^gint64 undigits(BoundedArrayInt32 digits)$/;"	f
value	Problem054.c	/^    Value value;$/;"	m	struct:__anon3	file:
valueCount	Problem031.c	/^int valueCount = 8;$/;"	v
valueCurrency	Problem031.c	/^int valueCurrency(Currency curr)$/;"	f
valueToChar	Problem054.c	/^char valueToChar(Value v)$/;"	f
values	Problem031.c	/^int values[] = {200, 100, 50, 20, 10, 5, 2, 1};$/;"	v
winner	Problem054.c	/^int winner(Hand a, Hand b)$/;"	f
x	Problem081.c	/^    int x,y;$/;"	m	struct:__anon7	file:
y	Problem081.c	/^    int x,y;$/;"	m	struct:__anon7	file:
