routes 1 n = 1 + n
routes 2 n = triangleNumber (n+1) = [1..(n+1)]
routes 3 n = ?

(routes 3 n) - (routes 3 (n-1)) = routes 2 n
routes 3 n = routes 2 n + routes 3 (n-1)

routes 2 n:
[3,6,10,15,21,28 etc]

routes 3 n:
[4,10,20,35,56,84 etc]

routes 4 n:
[5, 15, 35, 70, 126, 210 etc]

sum (take m (map (uncurry routes) (zip repeat n [1..]))) ==
    1 + routes m (n+1) !!!

let k = n+1
routes m k = sum (take m (map (uncurry routes) (zip repeat (k-1) [1..])))

this is WAY slower than the naive way of adding 2 recursive calls.

routes (k-1) n = routes (k-2) n + routes (k-1) (n-1)
routes k (n-1) = routes (k-1) (n-1) + routes k (n-2)

routes (k-2) n = routes (k-3) n + routes (k-2) (n-1)
routes k (n-2) = routes (k-1) (n-2) + routes k (n-3)

routes (k-1) (n-1) = routes (k-2) (n-1) + routes (k-1) (n-2)

routes (k-2) (n-1) = routes (k-3) (n-1) + routes (k-2) (n-2)
routes (k-1) (n-2) = routes (k-2) (n-2) + routes (k-1) (n-3)

routes (k-3) n = routes (k-4) n + routes (k-3) (n-1)
routes k (n-3) = routes (k-1) (n-3) + routes k (n-4)

routes k n  = routes (k-1) n + routes k (n-1)
            = routes (k-2) n + routes (k-1) (n-1) + routes (k-1) (n-1) + routes k (n-2)
            = (2 * routes (k-1) (n-1)) + routes (k-2) n + routes k (n-2)
            
            = (2 * routes (k-1) (n-1)) +
                routes (k-3) n + routes (k-2) (n-1) +
                routes (k-1) (n-2) + routes k (n-3)
                
            = (2 * (routes (k-2) (n-1) + routes (k-1) (n-2))) +
                routes (k-3) n + routes (k-2) (n-1) +
                routes (k-1) (n-2) + routes k (n-3)
                
            =   3 * routes (k-2) (n-1) +
                3 * routes (k-1) (n-2) +
                routes (k-3) n +
                routes k (n-3)

            =   3 * (routes (k-3) (n-1) + routes (k-2) (n-2)) +
                3 * (routes (k-2) (n-2) + routes (k-1) (n-3)) +
                routes (k-3) n +
                routes k (n-3)
                
            =   3 * ((2 * routes (k-2) (n-2)) + routes (k-3) (n-1) + routes (k-1) (n-3)) +
                routes (k-3) n +
                routes k (n-3)
                
            =   3 * ((2 * routes (k-2) (n-2)) + routes (k-3) (n-1) + routes (k-1) (n-3)) +
                routes (k-4) n + routes (k-3) (n-1) +
                routes (k-1) (n-3) + routes k (n-4)
                
            =   6 * (routes (k-2) (n-2)) +
                4 * (routes (k-3) (n-1)) +
                4 * (routes (k-1) (n-3)) +
                routes (k-4) n +
                routes k (n-4)
                
routes 6 2 = routes 2 6 (of course)
routes 6 3 = routes 3 6
routes 6 4 = routes 4 6


routes n n = sum ([routes (n-1) 1 .. routes n n-1])
           = sum (map (uncurry routes) (zip (repeat (n-1)) [1..n]))
           